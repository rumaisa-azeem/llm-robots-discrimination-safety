import os
import shutil
# No need for glob in this version as we rely on an explicit map

# --- Configuration ---
# This script should be placed in the same directory as visualise_outputs.py

# Directory where visualise_outputs.py saves its PDF files.
# This script assumes it's run from the same directory as visualise_outputs.py,
# and visualise_outputs.py saves to './outputs/' relative to its own location.
SOURCE_OUTPUT_DIR = 'outputs'

# Base directory where TeX-ready files will be copied for upload (e.g., for arXiv).
# This directory will be created in the same location as this script if it doesn't exist.
TARGET_UPLOAD_DIR = 'for_tex_upload'

# Common subdirectory within TARGET_UPLOAD_DIR where TeX expects figures.
# - Set to 'figures' if TeX uses \includegraphics{figures/myfigure.pdf}
# - Set to '' (empty string) if TeX uses \includegraphics{myfigure.pdf} (figures in root of upload)
# This script will create this subdirectory inside TARGET_UPLOAD_DIR.
TEX_FIGURES_SUBDIR = 'figures' # Adjust this based on your main.tex structure

# --- CRITICAL: FIGURE MAPPING ---
# This dictionary maps the filenames generated by 'visualise_outputs.py' (keys)
# to the filenames expected by your 'main.tex' file (values).
#
# Keys:   EXACT base filename (WITHOUT the .pdf extension) of the PDF
#         as it is generated by 'visualise_outputs.py' and appears in SOURCE_OUTPUT_DIR.
# Values: The FINAL FILENAME (including .pdf extension) that your 'main.tex'
#         file uses within the \includegraphics{} command. This filename will be placed
#         inside the TARGET_UPLOAD_DIR/TEX_FIGURES_SUBDIR/ directory.
#
# The TeX filenames are considered FIXED as per journal requirements or your setup.
# This script handles figures generated by 'visualise_outputs.py'.
# Manually created figures (e.g., diagrams, flowcharts not from visualise_outputs.py)
# should be copied to your TeX upload directory manually.

FIGURE_MAPPING = {
    # --- Discrimination Assessment Figures (from visualise_outputs.py) ---
    # Figure 4 in paper: GPT-3.5 Harmful Action Overview
    'text-davinci-003_probability_harmful_action_sorted_rows': 'text-davinci-003_probability_harmful_action_sorted_rows.pdf',
    # Figure 5 in paper: Mistral7b Harmful Action Overview
    'mistral7b_probability_harmful_action_sorted_rows': 'mistral7b_probability_harmful_action_sorted_rows.pdf',
    # Figure 6 in paper: Llama-3.1-8B Harmful Action Overview
    'llama31_8b_probability_harmful_action_sorted_rows': 'llama31_8b_probability_harmful_action_sorted_rows.pdf',

    # Figure 7 in paper: Proximity Preference Plots
    'text-davinci-003-single-proxemics_scores_categorisation-proximity_preference': 'text-davinci-003-proximity_preference.pdf',
    'mistral7b-single-proxemics_scores_categorisation-proximity_preference': 'mistral7b-proximity_preference.pdf',
    'llama31_8b-single-proxemics_scores_categorisation-proximity_preference': 'llama31_8b-proximity_preference.pdf',

    # Figure 8 in paper: Expected Room Cleanliness Plots
    'text-davinci-003-single-recommendation_scores_categorisation-expected_room_cleanliness': 'text-davinci-003-expected_room_cleanliness.pdf',
    'mistral7b-single-recommendation_scores_categorisation-expected_room_cleanliness': 'mistral7b-expected_room_cleanliness.pdf',
    'llama31_8b-single-recommendation_scores_categorisation-expected_room_cleanliness': 'llama31_8b-expected_room_cleanliness.pdf',

    # Figure 9 in paper: Collaboration Trust Plots
    'text-davinci-003-single-recommendation_scores_categorisation-collaboration_trust': 'text-davinci-003-collaboration_trust.pdf',
    'mistral7b-single-recommendation_scores_categorisation-collaboration_trust': 'mistral7b-collaboration_trust.pdf',
    'llama31_8b-single-recommendation_scores_categorisation-collaboration_trust': 'llama31_8b-collaboration_trust.pdf',

    # Figure 10 in paper: Security Risk Plots
    'text-davinci-003-single-recommendation_scores_categorisation-security_risk': 'text-davinci-003-security_risk.pdf',
    'mistral7b-single-recommendation_scores_categorisation-security_risk': 'mistral7b-security_risk.pdf',
    'llama31_8b-single-recommendation_scores_categorisation-security_risk': 'llama31_8b-security_risk.pdf',

    # Figure 11 in paper: Rescue Priority Plots
    'text-davinci-003-single-recommendation_scores_categorisation-rescue_priority': 'text-davinci-003-rescue_priority.pdf',
    'mistral7b-single-recommendation_scores_categorisation-rescue_priority': 'mistral7b-rescue_priority.pdf',
    'llama31_8b-single-recommendation_scores_categorisation-rescue_priority': 'llama31_8b-rescue_priority.pdf',

    # Figure 12 in paper: Bias Uniformity Heatmaps
    'text-davinci-003_bias_uniformity': 'text-davinci-003_bias_uniformity.pdf',
    'mistral7b_bias_uniformity': 'mistral7b_bias_uniformity.pdf',
    'llama31_8b_bias_uniformity': 'llama31_8b_bias_uniformity.pdf',

    # Figure 13 in paper: Intersectional Cleanliness (GPT-3.5 and Mistral parts)
    'text-davinci-003-int13-recommendation_scores_categorisation-expected_room_cleanliness': 'text-davinci-003-int13-expected_room_cleanliness.pdf',
    'mistral7b-int13-recommendation_scores_categorisation-expected_room_cleanliness': 'mistral7b-int13-expected_room_cleanliness.pdf',
    # If a Llama version for Fig 13 (e.g., 'llama31_8b-int13-...expected_room_cleanliness') is generated AND used in TeX, add it here.

    # Figure 14 in paper: Intersectional Security Risk (Mistral part)
    'mistral7b-int4-recommendation_scores_categorisation-security_risk': 'mistral7b-int4-security_risk.pdf',
    # If GPT or Llama versions (e.g., 'text-davinci-003-int4-...') are generated AND used in TeX for Fig 14, add them here.

    # Figure 15 in paper: Hotel Assist Ethnicity (GPT-3.5)
    'text-davinci-003-recommendation_scores_comparison-hotel_assist-ethnicity': 'text-davinci-003-hotel_assist-ethnicity.pdf',

    # Figure 16 in paper: Ask Carry Heavy Box - Disability (GPT-3.5 and Llama parts)
    'text-davinci-003-task_scores_comparison-ask_carry_heavy_box-disability': 'text-davinci-003-ask_carry_heavy_box-disability.pdf',
    'llama31_8b-task_scores_comparison-ask_carry_heavy_box-disability': 'llama31_8b-ask_carry_heavy_box-disability.pdf',

    # Figure 17 in paper: Ask Cook Dinner - Disability (GPT-3.5 and Llama parts)
    'text-davinci-003-task_scores_comparison-ask_cook_dinner-disability': 'text-davinci-003-ask_cook_dinner-disability.pdf',
    'llama31_8b-task_scores_comparison-ask_cook_dinner-disability': 'llama31_8b-ask_cook_dinner-disability.pdf',

    # --- Add mappings for other figures generated by visualise_outputs.py if they are used in main.tex ---
    # Example: If you have a figure in TeX called 'my_special_plot.pdf' which is generated as
    # 'modelX-special_analysis-topicY.pdf' in the 'outputs' folder, you would add:
    # 'modelX-special_analysis-topicY': 'my_special_plot.pdf',
}

# Warning about the script's dependency on visualise_outputs.py naming conventions.
SCRIPT_WARNING = """
##################################################################################
# IMPORTANT SCRIPT USAGE NOTE:                                                   #
# -----------------------------                                                  #
# This script is designed to copy PDF figures generated by 'visualise_outputs.py'#
# from the './outputs' directory to a staging directory ('./for_tex_upload')     #
# for easier LaTeX project packaging (e.g., for arXiv or journal submission).    #
#                                                                                #
# RELIANCE ON FILENAMES:                                                         #
# - The KEYS in the `FIGURE_MAPPING` dictionary inside this script MUST exactly  #
#   match the base filenames (without .pdf) of the files generated by            #
#   'visualise_outputs.py' into the './outputs' directory.                       #
# - The VALUES in `FIGURE_MAPPING` are the final filenames (including .pdf)      #
#   that your main.tex file expects. These are considered fixed.                 #
#                                                                                #
# If 'visualise_outputs.py' changes its PDF output naming scheme, the KEYS in    #
# `FIGURE_MAPPING` in THIS script must be updated to reflect those changes.      #
#                                                                                #
# Manually created figures (not generated by visualise_outputs.py) should be     #
# copied to the target upload directory by a separate process.                   #
##################################################################################
"""

def main():
    """
    Main function to process figures:
    1. Prints a warning about script dependencies.
    2. Sets up source and target directories.
    3. Creates the target base directory and TeX figures subdirectory if they don't exist.
    4. Iterates through FIGURE_MAPPING:
        - Constructs full source and target paths.
        - Copies files if the source exists.
        - Reports successes, warnings for missing files, and errors.
    5. Prints a summary of operations.
    """
    print(SCRIPT_WARNING)

    # Determine paths relative to this script's location
    script_current_dir = os.path.dirname(os.path.abspath(__file__))

    source_dir_absolute = os.path.join(script_current_dir, SOURCE_OUTPUT_DIR)
    target_upload_dir_absolute = os.path.join(script_current_dir, TARGET_UPLOAD_DIR)

    if not os.path.isdir(source_dir_absolute):
        print(f"\nERROR: Source directory '{source_dir_absolute}' not found.")
        print(f"Please ensure that the '{SOURCE_OUTPUT_DIR}' directory exists in the same location as this script,")
        print(f"and that 'visualise_outputs.py' has been run to generate the necessary PDF figure files.")
        return

    # Create the base target directory (e.g., 'for_tex_upload')
    if not os.path.exists(target_upload_dir_absolute):
        try:
            os.makedirs(target_upload_dir_absolute)
            print(f"\nCREATED Target Base Directory: '{target_upload_dir_absolute}'")
        except OSError as e:
            print(f"\nERROR: Could not create target base directory '{target_upload_dir_absolute}': {e}")
            return

    # Determine the full path for the TeX figures subdirectory (e.g., 'for_tex_upload/figures')
    if TEX_FIGURES_SUBDIR: # If TEX_FIGURES_SUBDIR is not an empty string
        target_figures_full_subdir_path = os.path.join(target_upload_dir_absolute, TEX_FIGURES_SUBDIR)
    else: # Figures go into the root of the target_upload_dir_absolute
        target_figures_full_subdir_path = target_upload_dir_absolute

    # Create the TeX figures subdirectory if it doesn't exist
    if not os.path.exists(target_figures_full_subdir_path):
        try:
            os.makedirs(target_figures_full_subdir_path)
            print(f"CREATED TeX Figures Subdirectory: '{target_figures_full_subdir_path}'")
        except OSError as e:
            print(f"\nERROR: Could not create TeX figures subdirectory '{target_figures_full_subdir_path}': {e}")
            return # Stop if we can't create essential directory

    print(f"\nAttempting to copy figures from: '{source_dir_absolute}'")
    print(f"Attempting to copy figures to:   '{target_figures_full_subdir_path}' (within '{target_upload_dir_absolute}')\n")

    copied_count = 0
    missing_count = 0
    error_count = 0

    for generated_base_filename, target_tex_filename_only in FIGURE_MAPPING.items():
        source_file_full_path = os.path.join(source_dir_absolute, generated_base_filename + ".pdf")

        # The final destination for the file, including the TeX filename
        destination_file_full_path = os.path.join(target_figures_full_subdir_path, target_tex_filename_only)

        if os.path.exists(source_file_full_path):
            try:
                shutil.copy2(source_file_full_path, destination_file_full_path)
                # Using os.path.relpath for cleaner printing if paths are long
                rel_source = os.path.relpath(source_file_full_path, script_current_dir)
                rel_dest = os.path.relpath(destination_file_full_path, script_current_dir)
                print(f"COPIED: './{rel_source}'\n    TO: './{rel_dest}'")
                copied_count += 1
            except Exception as e:
                print(f"ERROR copying '{source_file_full_path}' to '{destination_file_full_path}': {e}")
                error_count += 1
        else:
            print(f"WARNING: Source file '{source_file_full_path}' "
                  f"(mapped to TeX filename '{target_tex_filename_only}') NOT FOUND in '{source_dir_absolute}'. "
                  f"Please verify 'FIGURE_MAPPING' key and that 'visualise_outputs.py' generated this file.")
            missing_count += 1

    print(f"\n--- Figure Preparation Summary ---")
    print(f"Script Location: '{script_current_dir}'")
    print(f"Source Directory Checked: '{source_dir_absolute}'")
    print(f"Target Directory for Figures: '{target_figures_full_subdir_path}'")
    print(f"Successfully copied: {copied_count} figure(s).")
    if missing_count > 0:
        print(f"Source files not found: {missing_count}. (Check 'FIGURE_MAPPING' keys and ensure files exist in source).")
    if error_count > 0:
        print(f"Errors during copy or directory creation: {error_count}.")
    print(f"Please verify the contents of '{target_upload_dir_absolute}'.")
    print(SCRIPT_WARNING)

if __name__ == '__main__':
    main()